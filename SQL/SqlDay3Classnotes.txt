Last class 
select 
FROM
<where >
group by
having 
order by 
limit 
--Display top 5 employees information based on their salary 
select * from employees order by salary desc limit 5 ;

--Display all the information of employee who earns least salary 
select * from employees order by salary ASC limit 1;

--Agenda
Limit 
Date 
DDL--
DML --
Constraints --
Joins 

Datatypes --
SQLITE 			
integer --
text-

real floating point number
blob binary 
sqlite date FUNCTIONS
1. Strftime()
2.date 
'%Y'---1987
'%m'  --month
'%d'--date
SELECT strftime('%Y',HIRE_DATE)as year ,strftime('%m',HIRE_DATE)as month,
strftime('%d',HIRE_DATE)as date,hire_date FROM employees;

--Retrieve current date 
select date('now');

select hire_date,date(hire_date,'+1 month') from employees;
--Limit 
--Datefunction ---strftime(),date()
SQL 
DQL--Data query/retrieval language (SELECT)
DML- Data manipulation Language (INSERT,UPDATE,DELETE)
DDL-Data definition language (CREATE,ALTER,DROP)

--DDL 
sqlite --integer,text,real,blob

 
CREATE table author (
 authorid integer,
 authorname text);
 --
 create a table pizza as 
 pizzaid -- INTEGER
 pizzaname --- TEXT
 price --- integer 
 
 --add a new row (dml  -insert)
 
 insert into author (authorid,authorname) values(1,'Ankush');
 
 insert into author values (3,'Sheena'),(4,'Anil');
 --Add 3 rows to pizza table 
 
 
 
 select * from author;
 --Update 
 update author 
 set authorname ='Steven'
where authorid=2; 

 update author 
 set authorname ='Steven';
--Update the row pizzaid=1 with price =500

--DElete row 

select * from author;
delete from author where authorid=1;


delete from author;

--Delete pizzaid=1 from pizza table 
rollback--undo 

CREATE ,ALTER TABLE ,DROP -DDL 
INSERT,UPDATE,DELETE (ROWS ,REVERSIBLE)--DML

SELECT * FROM AUTHOR;

DROP TABLE AUTHOR;(DROP DATA,STRUCTURE OF THE TABLE)

alTER TABLE(rename columnname,add new column,drop/delete column)  DDL 




Create table customer with following columns
1.customerid INTEGER
2.customername TEXT
3.custorderamount integer

1. Add 2 rows 
(1,'Allen',300)
(2,'Bruce',400)
2.update  custorderamount to 500 where customerid=1
3.delete rows where customerid=1
4.drop the table customer

ALTER TABLE COMMAND IN SQLITE 
In sqlite -- we can add new column,rename a table 

CREATE TABLE AUTHOR (
ALTER TABLE AUTHOR 
ADD BOOK




















oRACLE
INTEGER 
CHAR(10) FIXED LENGTH STRING   'hELLO'  10
VARCHAR (255) VARABLE length  'HELLO'   5 
DATE DATATYPE --DD-MON-YYYY





ALTER TABLE AUTHOR 
ADD BOOKPRICE INTEGER;

ALTER TABLE bookauthor
RENAME column authorid  TO BOOKAUTHOR1;

drop --irrever

--ddl --CREATE,ALTER,DROP  ---(STRUCTURE AND DATA OF THE TABLE)
--DML-INSERT,UPDATE,DELETE (DELETE ROWS FROM TABLE)

--CREATE A TABLE BOOK 
--WITH BOOKID INTEGER

--ADD A NEW COLUMN bookprice integer 

commit---autocommit 
drop    				delete 

1.not reversible     1.reversible 
2.DDL 				 2.dml
3.structure&data     3.data 
Please attempt 
a,False,False 
1.SELECT is a 
 a. DQL command 
 b.DML command 

2. UPDATE command is  DDL command 
a.True 
b.False

3. DROP TABLE is a DML command
a.True 
b.False

Constraints--correct 
--rules enforced on the tables 

1.NOT NULL
2.DEFAULT
3.PRIMARY KEY 
4.FOREIGN KEY
5.CHECK
6.UNIQUE

1.not null--ensures that a column cannot have NULL value 

create table book(
bookid integer not null,
bookprice integer); 

insert into book (bookprice) values(100);


drop table book;

--2.Default ---default value will be entered 
create table book (
bookid integer not null,
bookprice integer  default 500);

insert into book (bookid) values(1);
select * from book;
--create table e (empid integer and not null,
--age integer default 20

--UNIQUE constraint(allows unique values,NULL values )

drop table book;

create table book (bookid integer not null,
bookname text unique ,
bookprice integer );

insert into book values(1,'truth1',null),(2,'truth',null);
null value --different weight 
select * from book;

--Not NULL
--UNIQUE
--DEFAULT

--primary key--unique,not null
each table should have 1 primary key 
--in sqlite(not null ,primary key ) 

create table book(bookid integer not null primary key,
bookname text,
bookprice integer);


insert into book values(1,'truth',500),(2,'truth1',300);


Foreign Key ---
Book --bookid --primary key 

create table author (authorid integer primary key not null,
bookid integer REFERENCES book(bookid));

 select * from author;


insert into author values(101,200);
create table dept (deptid integer primary key 
select * from departments;--master table 
department_id--10,20--primary key (unique,not null)

select * from employees;
employee_id--primary key 
department_id--


create table dept (deptid primary key ,dname text)


create table emp(empid primary key ,ename text,dept id foreign key from
 dept(deptid)

 Relationships
 1-1 relationship 
 employee --salary account 
 1-1
 
 1-m relationship
 1 dept --many employees 
 
 m:n 
 primary key ,foreign key 
 employees       project 
 employeeid      projid --unique
                 employee_id
				 
				 
--check constraint 
--age <20 
drop table emp;
create table emp(empid integer primary key not null,
age integer check(age>20));

insert into emp values (1,18);
drop table emp;
=========================

drop table pizza;
create table pizza(pizzaid integer primary key not null,
pizzaname is text,
price is integer check constraint price >100

--Limit 
--Date functions
strftime,date 

--DDL -CREATE,ALTER,DROP
--DML-INSERT,UPDATE,DELETE

--CONSTRAINTS

--NOT NULL
--UNIQUE-  UNIQUE,NOT NULL)
--DEFAULT
--PRIMARY KEY (UNIQUE,NOT NULL)
--FOREIGN KEY (REFER PRIMARY KEY)
--CHECK CONSTRAINT --CHECK 


  
 
 
 
 
 
 












book (foreign 
empl







